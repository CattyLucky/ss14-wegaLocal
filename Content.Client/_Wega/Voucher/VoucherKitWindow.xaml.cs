using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Voucher.Components;
using Content.Shared.Voucher;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Wega.Voucher;

[GenerateTypedNameReferences]
public sealed partial class VoucherKitWindow : RadialMenu
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly SpriteSystem _sprite;

    public event Action<ProtoId<VoucherKitPrototype>>? OnKitSelected;
    private List<ProtoId<VoucherKitPrototype>> _kits = new();

    public VoucherKitWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entMan.System<SpriteSystem>();
    }

    public void Populate(VoucherKitSelectionState state)
    {
        MainContainer.RemoveAllChildren();
        _kits = state.AvailableKits;

        for (var i = 0; i < _kits.Count; i++)
        {
            if (!_prototype.TryIndex(_kits[i], out var kit))
                continue;

            var button = CreateKitButton(kit);
            MainContainer.AddChild(button);
        }
    }

    private RadialMenuContextualCentralTextureButton CreateKitButton(VoucherKitPrototype kit)
    {
        var button = new RadialMenuContextualCentralTextureButton
        {
            ToolTip = $"{Loc.GetString(kit.Name)}\n{Loc.GetString(kit.Description)}",
            SetSize = new Vector2(72, 72),
        };

        button.StyleClasses.Add("RadialMenuButton");

        var container = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalAlignment = HAlignment.Center,
            VerticalAlignment = VAlignment.Center
        };

        if (kit.Icon != null)
        {
            var icon = new TextureRect
            {
                Texture = _sprite.Frame0(kit.Icon),
                Stretch = TextureRect.StretchMode.KeepCentered,
                SetSize = new Vector2(48, 48)
            };
            container.AddChild(icon);
        }
        else if (kit.Items.Count > 0 && _prototype.TryIndex<EntityPrototype>(kit.Items[0], out var firstItem))
        {
            var entityView = new EntityPrototypeView
            {
                Scale = new Vector2(1.5f, 1.5f),
                SetSize = new Vector2(48, 48),
                Margin = new Thickness(2)
            };
            entityView.SetPrototype(firstItem.ID);
            container.AddChild(entityView);
        }

        button.AddChild(container);
        button.OnPressed += _ => OnKitSelected?.Invoke(kit.ID);

        return button;
    }
}
